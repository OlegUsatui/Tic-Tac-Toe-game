{"version":3,"sources":["utils/functions.js","components/Square.js","components/Board.js","components/Score.js","components/Modal.js","components/App.js","index.js"],"names":["restartGame","setBoard","setTimeout","Array","fill","Square","value","onClick","index","className","Board","indexWinRow","board","handleClick","map","el","Score","playersName","win1","win2","playerName1","playerName2","Modal","onSubmit","useState","setPlayerName1","setPlayerName2","name","e","preventDefault","type","onChange","target","autoComplete","autoFocus","placeholder","App","turn","setTurn","winner1","setWinner1","winner2","setWinner2","modalIsOpen","setModalIsOpen","playerName","setPlayerName","setIndexWinRow","useEffect","rows","i","length","a","b","c","winValue","findWinner","prev","toast","success","every","info","newBoard","splice","position","autoClose","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb2f5c61.chunk.js","sourcesContent":["export function findWinner(board) {\r\n  const rows = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const [a, b, c] = rows[i];\r\n\r\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n      return { winValue: board[a], indexWinRow: i };\r\n    }\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\nexport const restartGame = (setBoard) => {\r\n  setTimeout(() => setBoard(Array(9).fill(\"\")), 1000);\r\n};\r\n","import \"../styles/Square.css\";\r\n\r\nconst Square = ({ value, onClick, index }) => {\r\n  return (\r\n    <button className=\"square\" onClick={() => onClick(index)}>\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import \"../styles/Board.css\";\r\nimport Square from \"./Square\";\r\n\r\nconst Board = ({ indexWinRow, board, handleClick }) => {\r\n  return (\r\n    <>\r\n      <div className=\"board\">\r\n        {board.map((el, index) => {\r\n          return (\r\n            <Square\r\n              key={index}\r\n              value={el}\r\n              index={index}\r\n              onClick={handleClick}\r\n            />\r\n          );\r\n        })}\r\n        <div className={`line${indexWinRow}`}></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import \"../styles/Score.css\";\r\n\r\nconst Score = ({ playersName, win1, win2 }) => {\r\n  const { playerName1, playerName2 } = playersName;\r\n  return (\r\n    <div className=\"container\">\r\n      <h2 className=\"title\">Score</h2>\r\n      <p className=\"score\">\r\n        Player {playerName1} (X): {win1}\r\n      </p>\r\n      <p className=\"score\">\r\n        Player 2 {playerName2} (O): {win2}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import \"../styles/Modal.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst Modal = ({ onSubmit }) => {\r\n  const [playerName1, setPlayerName1] = useState(\"\");\r\n  const [playerName2, setPlayerName2] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit({ playerName1, playerName2 });\r\n  };\r\n\r\n  return (\r\n    <div className=\"overlay\" name=\"overlay\">\r\n      <div className=\"modal\">\r\n        <form className=\"form\" onSubmit={handleSubmit}>\r\n          <h2>Welcome to the game of tic tac toe</h2>\r\n          <p className=\"text\">Enter the name of the player №1</p>\r\n          <input\r\n            value={playerName1}\r\n            type=\"text\"\r\n            onChange={(e) => setPlayerName1(e.target.value)}\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Player Х\"\r\n          ></input>\r\n          <p className=\"text\">Enter the name of the player №2</p>\r\n          <input\r\n            value={playerName2}\r\n            type=\"text\"\r\n            onChange={(e) => setPlayerName2(e.target.value)}\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Player О\"\r\n          ></input>\r\n          <button type=\"submit\" className=\"buttonSubmit\">\r\n            Start\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Modal;\r\n","import { useEffect, useState } from \"react\";\nimport \"../styles/App.css\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { findWinner, restartGame } from \"../utils/functions\";\nimport Board from \"./Board\";\nimport Score from \"./Score\";\nimport Modal from \"./Modal\";\n\nconst App = () => {\n  const [board, setBoard] = useState(Array(9).fill(\"\"));\n  const [turn, setTurn] = useState(\"X\");\n  const [winner1, setWinner1] = useState(0);\n  const [winner2, setWinner2] = useState(0);\n  const [modalIsOpen, setModalIsOpen] = useState(true);\n  const [playerName, setPlayerName] = useState(\"\");\n  const [indexWinRow, setIndexWinRow] = useState(null);\n\n  useEffect(() => {\n    const { playerName1, playerName2 } = playerName;\n    const { winValue, indexWinRow } = findWinner(board);\n\n    setIndexWinRow(indexWinRow);\n\n    if (winValue && winValue === \"X\") {\n      setWinner1((prev) => prev + 1);\n      toast.success(`Победил ${playerName1}`);\n      restartGame(setBoard);\n      return;\n    }\n    if (winValue && winValue === \"O\") {\n      setWinner2((prev) => prev + 1);\n      toast.success(`Победил ${playerName2}`);\n      restartGame(setBoard);\n      return;\n    }\n    if (board.every((value) => value)) {\n      toast.info(`Ничья`);\n      restartGame(setBoard);\n    }\n  }, [board, playerName]);\n\n  const onSubmit = (playersName) => {\n    setPlayerName(playersName);\n    setModalIsOpen(false);\n  };\n\n  const handleClick = (index) => {\n    if (index < 0 || index > 9 || board[index]) return;\n\n    const newBoard = [...board];\n    newBoard.splice(index, 1, turn);\n    setBoard(newBoard);\n    const newTurn = turn === \"X\" ? \"O\" : \"X\";\n    setTurn(newTurn);\n  };\n\n  return (\n    <div className=\"App\">\n      <Board\n        indexWinRow={indexWinRow}\n        board={board}\n        handleClick={handleClick}\n      />\n      <Score playersName={playerName} win1={winner1} win2={winner2} />\n      <ToastContainer position=\"top-right\" autoClose={3000} />\n      {modalIsOpen && <Modal onSubmit={onSubmit} />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}